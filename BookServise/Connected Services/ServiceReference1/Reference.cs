//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BookServise.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetBooks", ReplyAction="http://tempuri.org/IService1/GetBooksResponse")]
        WcfServiceBooks.DAL.Books GetBooks(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetBooks", ReplyAction="http://tempuri.org/IService1/GetBooksResponse")]
        System.Threading.Tasks.Task<WcfServiceBooks.DAL.Books> GetBooksAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Add", ReplyAction="http://tempuri.org/IService1/AddResponse")]
        int Add(WcfServiceBooks.DAL.Books entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Add", ReplyAction="http://tempuri.org/IService1/AddResponse")]
        System.Threading.Tasks.Task<int> AddAsync(WcfServiceBooks.DAL.Books entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddRange", ReplyAction="http://tempuri.org/IService1/AddRangeResponse")]
        int AddRange(WcfServiceBooks.DAL.Books[] entities);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddRange", ReplyAction="http://tempuri.org/IService1/AddRangeResponse")]
        System.Threading.Tasks.Task<int> AddRangeAsync(WcfServiceBooks.DAL.Books[] entities);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Save", ReplyAction="http://tempuri.org/IService1/SaveResponse")]
        int Save(WcfServiceBooks.DAL.Books entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Save", ReplyAction="http://tempuri.org/IService1/SaveResponse")]
        System.Threading.Tasks.Task<int> SaveAsync(WcfServiceBooks.DAL.Books entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Delete", ReplyAction="http://tempuri.org/IService1/DeleteResponse")]
        int Delete(WcfServiceBooks.DAL.Books entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Delete", ReplyAction="http://tempuri.org/IService1/DeleteResponse")]
        System.Threading.Tasks.Task<int> DeleteAsync(WcfServiceBooks.DAL.Books entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetOne", ReplyAction="http://tempuri.org/IService1/GetOneResponse")]
        WcfServiceBooks.DAL.Books GetOne(System.Nullable<int> id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetOne", ReplyAction="http://tempuri.org/IService1/GetOneResponse")]
        System.Threading.Tasks.Task<WcfServiceBooks.DAL.Books> GetOneAsync(System.Nullable<int> id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAll", ReplyAction="http://tempuri.org/IService1/GetAllResponse")]
        WcfServiceBooks.DAL.Books[] GetAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAll", ReplyAction="http://tempuri.org/IService1/GetAllResponse")]
        System.Threading.Tasks.Task<WcfServiceBooks.DAL.Books[]> GetAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ExecuteQuery", ReplyAction="http://tempuri.org/IService1/ExecuteQueryResponse")]
        WcfServiceBooks.DAL.Books[] ExecuteQuery(string sql);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ExecuteQuery", ReplyAction="http://tempuri.org/IService1/ExecuteQueryResponse")]
        System.Threading.Tasks.Task<WcfServiceBooks.DAL.Books[]> ExecuteQueryAsync(string sql);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : BookServise.ServiceReference1.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<BookServise.ServiceReference1.IService1>, BookServise.ServiceReference1.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public WcfServiceBooks.DAL.Books GetBooks(int id) {
            return base.Channel.GetBooks(id);
        }
        
        public System.Threading.Tasks.Task<WcfServiceBooks.DAL.Books> GetBooksAsync(int id) {
            return base.Channel.GetBooksAsync(id);
        }
        
        public int Add(WcfServiceBooks.DAL.Books entity) {
            return base.Channel.Add(entity);
        }
        
        public System.Threading.Tasks.Task<int> AddAsync(WcfServiceBooks.DAL.Books entity) {
            return base.Channel.AddAsync(entity);
        }
        
        public int AddRange(WcfServiceBooks.DAL.Books[] entities) {
            return base.Channel.AddRange(entities);
        }
        
        public System.Threading.Tasks.Task<int> AddRangeAsync(WcfServiceBooks.DAL.Books[] entities) {
            return base.Channel.AddRangeAsync(entities);
        }
        
        public int Save(WcfServiceBooks.DAL.Books entity) {
            return base.Channel.Save(entity);
        }
        
        public System.Threading.Tasks.Task<int> SaveAsync(WcfServiceBooks.DAL.Books entity) {
            return base.Channel.SaveAsync(entity);
        }
        
        public int Delete(WcfServiceBooks.DAL.Books entity) {
            return base.Channel.Delete(entity);
        }
        
        public System.Threading.Tasks.Task<int> DeleteAsync(WcfServiceBooks.DAL.Books entity) {
            return base.Channel.DeleteAsync(entity);
        }
        
        public WcfServiceBooks.DAL.Books GetOne(System.Nullable<int> id) {
            return base.Channel.GetOne(id);
        }
        
        public System.Threading.Tasks.Task<WcfServiceBooks.DAL.Books> GetOneAsync(System.Nullable<int> id) {
            return base.Channel.GetOneAsync(id);
        }
        
        public WcfServiceBooks.DAL.Books[] GetAll() {
            return base.Channel.GetAll();
        }
        
        public System.Threading.Tasks.Task<WcfServiceBooks.DAL.Books[]> GetAllAsync() {
            return base.Channel.GetAllAsync();
        }
        
        public WcfServiceBooks.DAL.Books[] ExecuteQuery(string sql) {
            return base.Channel.ExecuteQuery(sql);
        }
        
        public System.Threading.Tasks.Task<WcfServiceBooks.DAL.Books[]> ExecuteQueryAsync(string sql) {
            return base.Channel.ExecuteQueryAsync(sql);
        }
    }
}
